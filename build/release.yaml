name: $(Date:MMddyyyy)$(Rev:.r)-${{ parameters.Environment }}
parameters:
  - name: Environment
    type: string
    default: stg
    displayName: Environment specification
    values:
      - stg
      - sqa

trigger: none

variables:
- group: default
- name: repo1
  value: cxi-cdp-customer-profiles-partner-profile
- name: repo2
  value: cxi-cdp-customer-profiles-pos-profile
- name: repo3
  value: cxi-cdp-customer-profiles-user-profile
- name : tag
  value:  $(resources.pipeline.cxi-cdp-customer-profiles.runName)  

resources:
    repositories:
    - repository: templates
      type : git
      name : cxi-build-templates

    - repository: test-auto
      type : git
      name : cxi-cdp-test-auto  

    pipelines:
      - pipeline: cxi-cdp-customer-profiles
        source: cxi-cdp-customer-profiles
        trigger: none  

pool:
 vmImage: ubuntu-latest

stages:
 - stage: deploy
   displayName: Deploy to Kubernetes ${{ parameters.Environment }}
   jobs:
    - deployment: deploy
      displayName: Deploy to ${{ parameters.Environment }}
      variables:
      - group: common-${{ parameters.Environment }}
      environment: 'Kubernetes_${{ parameters.Environment }}'
      strategy:
        runOnce:
          deploy:
            steps:
            - download: none
            - script: echo "##vso[build.updatebuildnumber]$(tag)"  
            - template: HelmDeploy.yaml@templates
              parameters:
                kubernetesServiceConnectionName: 'Kub_CXI_Cluster'
                namespace: '${{ parameters.Environment }}-customer-profiles'
                acrname: '$(registry)'
                azureservice: 'cxi-devops'
                acrrepo: 'cxi-default:20220329.1'
                chartPath: '$(build.stagingdirectory)/cxi-default/'
                components:
                - componentname: 'customer-profiles-partner-profile'
                  releasename: 'customer-profiles-partner-profile'
                  overridevalues: "
                    application.name=customer-profiles-partner-profile,\
                    application.env=${{ parameters.Environment }},\
                    deployment.container.registry=$(registry),\
                    deployment.container.image.name=$(repo1),\
                    deployment.container.image.tag=$(tag),\
                    deployment.env.AZURE_APP_CONFIG=$(AZURE_APP_CONFIG),\
                    deployment.env.AZURE_KEY_VAULT_ID=$(AZURE_KEY_VAULT_ID),\
                    deployment.env.AZURE_KEY_VAULT_SECRET=$(AZURE_KEY_VAULT_SECRET),\
                    deployment.env.AZURE_KEY_VAULT_URL=$(AZURE_KEY_VAULT_URL),\
                    deployment.replicaCount=2,\
                    deployment.env.ASPNETCORE_ENVIRONMENT=$(ASPNETCORE_ENVIRONMENT)"
                - componentname: 'customer-profiles-pos-profile'
                  releasename: 'customer-profiles-pos-profile'
                  overridevalues: "
                    application.name=customer-profiles-pos-profile,\
                    application.env=${{ parameters.Environment }},\
                    deployment.container.registry=$(registry),\
                    deployment.container.image.name=$(repo2),\
                    deployment.container.image.tag=$(tag),\
                    deployment.env.AZURE_APP_CONFIG=$(AZURE_APP_CONFIG),\
                    deployment.env.AZURE_KEY_VAULT_ID=$(AZURE_KEY_VAULT_ID),\
                    deployment.env.AZURE_KEY_VAULT_SECRET=$(AZURE_KEY_VAULT_SECRET),\
                    deployment.env.AZURE_KEY_VAULT_URL=$(AZURE_KEY_VAULT_URL),\
                    deployment.replicaCount=2,\
                    deployment.env.ASPNETCORE_ENVIRONMENT=$(ASPNETCORE_ENVIRONMENT)"    
                - componentname: 'customer-profiles-user-profile'
                  releasename: 'customer-profiles-user-profile'
                  overridevalues: "
                    application.name=customer-profiles-user-profile,\
                    application.env=${{ parameters.Environment }},\
                    deployment.container.registry=$(registry),\
                    deployment.container.image.name=$(repo3),\
                    deployment.container.image.tag=$(tag),\
                    deployment.env.AZURE_APP_CONFIG=$(AZURE_APP_CONFIG),\
                    deployment.env.AZURE_KEY_VAULT_ID=$(AZURE_KEY_VAULT_ID),\
                    deployment.env.AZURE_KEY_VAULT_SECRET=$(AZURE_KEY_VAULT_SECRET),\
                    deployment.env.AZURE_KEY_VAULT_URL=$(AZURE_KEY_VAULT_URL),\
                    deployment.replicaCount=2,\
                    deployment.env.ASPNETCORE_ENVIRONMENT=$(ASPNETCORE_ENVIRONMENT)"

- template: AutoTests.yaml@templates
    parameters:
      env: ${{ parameters.Environment }}
      filter: '--filter "TestCategory=Authorization|TestCategory=Onboarding|TestCategory=Associates"'
      condition: "or(in(dependencies.deploy.result, 'Succeeded', 'SucceededWithIssues', 'Skipped'),in(dependencies.deploy.result, 'Succeeded', 'SucceededWithIssues', 'Skipped'))"
  

  - stage: rollback
    pool:
        vmImage: ubuntu-latest
    displayName: Rollback
    condition: failed()
    jobs:
          - deployment: rollback
            displayName: Rollback
            environment: 'Kubernetes_${{ parameters.Environment }}'
            strategy:
              runOnce:
                deploy:
                  steps:
                  - download: none
                  - template: HelmRollback.yaml@templates
                    parameters:
                      kubernetesServiceConnectionName: 'Kub_CXI_Cluster'
                      namespace: '${{ parameters.Environment }}-claims-resolver'
                      components:
                      - componentname: '$(app)'
                        releasename: '$(app)'